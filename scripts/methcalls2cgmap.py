# coding=UTF-8

# import packages
import pandas as pd
import numpy as np
import traceback
import argparse


def get_parser():
    """
    Create a parser and add arguments
    """
    parser = argparse.ArgumentParser()
    group1 = parser.add_argument_group('Input format')
    group1.add_argument("-n", "--filename", type=str, help="the file name that the users want to convert to CGMap format")
    group1.add_argument("-f", "--format", default="bismark",choices=["bismark", "bsmap", "methylpy", "methimpute"], type=str, help="the type of file to CGmap")
    return parser


def readfile(filename):
    """
    read files: allow the format with or without gz compressed
    """
    if filename[-3:] == ".gz":
        inputfile = pd.read_csv(filename, header = None, sep="\t", compression='gzip')
    else:
        inputfile = pd.read_csv(filename, header = None, sep="\t")
    return inputfile



def trinuc(threeletter):
    """
    function to acquire the methylation context (CG, CHG, CHH) 
    """
    if threeletter[1] == "G":
        context = "CG"
    if threeletter[1] != "G":
        if threeletter[2] == "G":
            context = "CHG"
        if threeletter[2]!="G":
            context = "CHH"
    return context


def bismark2cgmap(bismarkfile):
	"""
	CX report file to CGmap.gz
	"""
	name_bismark = bismarkfile
	bismark = readfile(name_bismark)
	try:
		int(bismark.iloc[0,1])
		header = "No"
	except:
		header = "Yes"
	if header == "Yes":
		bismark = bismark.iloc[1:,:]
	print(bismark.head())
	bismark["nuc"] = np.where(bismark[2]=="+","C","G")
	bismark["dinuc"] = [i[:2] for i in list(bismark[6])]
	bismark["mc_nc"] = bismark[3] + bismark[4]
	bismark["ratio"] = np.round(bismark[3].astype("float")/(bismark[3] + bismark[4]).astype("float"),2)
	cgmap_format = bismark[[0,"nuc",1,5,"dinuc","ratio",3,"mc_nc"]]
	cgmap_format_finish = cgmap_format.loc[(cgmap_format["mc_nc"]!=0)]
	cgmap_format_finish.to_csv(name_bismark + ".CGmap.gz", header = False, index = False, sep="\t", compression='gzip')


def bsmap2cgmap(bsmapfile):
	"""
	the methylation calls generated by methratio.py in BSMAP (v2.73) to CGmap.gz
	"""
	name_bsmap = bsmapfile 
	bsmap = readfile(name_bsmap)
	# the file with or without header can be properly processed
	try:
		int(bsmap.iloc[0,1])
		header = "No"
	except:
		header = "Yes"
	if header == "Yes":
		bsmap = bsmap.iloc[1:,:]
	# to get the items in CGmap
	bsmap["nuc"] = np.where(bsmap[2]=="+","C","G")
	bsmap["dinuc"] = [i[:2] for i in list(bsmap[3])]
	cgmap_format = bsmap[[0,"nuc",1,3,"dinuc",4,6,5]]
	cgmap_format_finish = cgmap_format.loc[(cgmap_format[5]!=0)]
	cgmap_format_finish.to_csv(name_bsmap[:-3] + "CGmap.gz", header = False, index = False, sep="\t", compression='gzip')



def methylpy2cgmap(methylpyfile):
	"""
	the allc files by methylpy to CGmap.gz
	"""
	name_methylpy = methylpyfile
	methylpy = readfile(name_methylpy)
	methylpy["nuc"] = np.where(methylpy[2]=="+","C","G")
	methylpy["dinuc"] = [i[:2] for i in list(methylpy[3])]
	methylpy["context"] = methylpy[3].apply(trinuc)
	methylpy["ratio"] = np.round(methylpy[4].astype("float")/methylpy[5].astype("float"),2)
	cgmap_format = methylpy[[0,"nuc",1,"context","dinuc","ratio",4,5]]
	cgmap_format_finish = cgmap_format.loc[(cgmap_format[5]!=0)]
	cgmap_format_finish.to_csv(name_methylpy + ".CGmap.gz", header = False, index = False, sep="\t", compression='gzip')



def methimpute2cgmap(methimputefile):
	"""
	TSV files exported from the methimpute to CGmap.gz
	"""
	name_methimpute = methimputefile
	methimpute = readfile(name_methimpute)
	methimpute["nuc"] = np.where(methimpute[2]=="+","C","G")
	methimpute["dinuc"] = [i[:2] for i in list(methimpute[3])]
	methimpute["ratio"] = round(methimpute[4].astype("float")/methimpute[5].astype("float"), 2)
	cgmap_format = methimpute[[0, "nuc", 1, 3, "dinuc", "ratio", 4, 5]]
	cgmap_format_finish = cgmap_format.loc[(cgmap_format["mc_nc"]!=0)]
	cgmap_format_finish.to_csv(name_bismark + ".CGmap.gz", header = False, index = False, sep="\t", compression='gzip')




def main():
	parser = get_parser()
	args = parser.parse_args()
	try:
		if args.format == "bismark":
			bismark2cgmap(args.filename)
		if args.format == "bsmap":
			bsmap2cgmap(args.filename)
		if args.format == "methylpy":
			methylpy2cgmap(args.filename)
		if args.format =="methimpute":
			methimpute2cgmap(args.filename)
	except Exception as e:
		print(e)
		print(traceback.format_exc())
		print("please check the input format or the parameter, see methcalls2cgmap.py -h")




if __name__ == '__main__':
    main()


